/* tslint:disable */

/* eslint-disable */

/**
 * test-front API
 * test-front API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ImageDto } from "../models/index";
import { ImageDtoFromJSON, ImageDtoToJSON } from "../models/index";
import * as runtime from "../runtime";

export interface ImageRequest {
  id: string;
}

export interface UploadImageRequest {
  file?: Blob;
}

/**
 *
 */
export class ImageApi extends runtime.BaseAPI {
  /**
   */
  async imageRaw(
    requestParameters: ImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling image."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/image/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ImageDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async image(
    requestParameters: ImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageDto> {
    const response = await this.imageRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async uploadImageRaw(
    requestParameters: UploadImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: "multipart/form-data" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.file !== undefined) {
      formParams.append("file", requestParameters.file as any);
    }

    const response = await this.request(
      {
        path: `/api/image`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ImageDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async uploadImage(
    requestParameters: UploadImageRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageDto> {
    const response = await this.uploadImageRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
